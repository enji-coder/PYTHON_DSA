2) Binary Search?

What is Binary Search? (Easy Explanation)
Imagine this:

You have a dictionary. You want to find the word “Tiger”.

Do you:

Start from page 1 and check every page?  (This is linear search)

Or open the dictionary in the middle and decide whether to go left or right? 
 (This is binary search)


=> Rule of Binary Search
Binary Search only works when the list is already sorted (small to big).

e.g. 

Sorted List: [2, 4, 7, 10, 12, 18, 20]
Find: 12

Step-by-step:
Start with whole list → Low = 0, High = 6

Find the middle index → Mid = (0 + 6) // 2 = 3

Check value at index 3 → arr[3] = 10

→ Is 10 = 12? X
→ Is 10 < 12?  → Go Right Half of the list

New search range = [12, 18, 20]
→ Low = 4, High = 6
→ Mid = (4 + 6) // 2 = 5 → arr[5] = 18

→ 18 > 12 → Go Left Half

Now: Low = 4, High = 4 → Mid = 4
→ arr[4] = 12 → FOUND!


=========================================
python code ::: 

def binary_search(arr, target):
    low = 0
    high = len(arr) - 1
    
    while low <= high:
        mid = (low + high) // 2
        if arr[mid] == target:
            return mid  # found
        elif arr[mid] < target:
            low = mid + 1  # go right
        else:
            high = mid - 1  # go left
    return -1  # not found

print(binary_search([2, 4, 7, 10, 12, 18, 20], 12))  # ➝ 4
print(binary_search([2, 4, 7, 10, 12, 18, 20], 5))   # ➝ -1

===============================================
task ::
--------------------------------------------
Find 8 in [2, 4, 6, 8, 10]

solution ::

def binary_search_debug(arr, target):
    low = 0
    high = len(arr) - 1

    while low <= high:
        mid = (low + high) // 2
        print(f"Checking between indexes {low} and {high}, mid = {mid}")
        print(f"Comparing arr[{mid}] = {arr[mid]} with target = {target}")

        if arr[mid] == target:
            print(" Found at index:", mid)
            return mid
        elif arr[mid] < target:
            print(f"{arr[mid]} is less than {target}, go right\n")
            low = mid + 1
        else:
            print(f"{arr[mid]} is greater than {target}, go left\n")
            high = mid - 1

    print(" Not found")
    return -1
================================================

Q2: Find 25 in [10, 20, 30, 40, 50]

Step-by-step:
low = 0, high = 4 → mid = 2 → arr[2] = 30 → 30 > 25 → Go left

low = 0, high = 1 → mid = 0 → arr[0] = 10 → 10 < 25 → Go right

low = 1, high = 1 → mid = 1 → arr[1] = 20 → 20 < 25 → Go right

low = 2, high = 1 →  Not found

print(binary_search([10, 20, 30, 40, 50], 25))  # Output: -1
====================================================
Q3: Find 21 in [3, 6, 9, 12, 15, 18, 21]

Step-by-step:

low = 0, high = 6 → mid = 3 → arr[3] = 12 → 12 < 21 → Go right

low = 4, high = 6 → mid = 5 → arr[5] = 18 → 18 < 21 → Go right

low = 6, high = 6 → mid = 6 → arr[6] = 21 → Found!

Output:

print(binary_search([3, 6, 9, 12, 15, 18, 21], 21))  # Output: 6
====================================================

Find 10 in [1, 3, 5, 7, 10, 15]

Find 5 in [1, 3, 5, 7, 10, 15]












