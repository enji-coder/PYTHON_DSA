=================================
What is an Algorithm?

An algorithm is a finite sequence of well-defined, step-by-step 
instructions to solve a specific problem or perform a computation.

An algorithm is a set of rules or a procedure to solve a problem in a finite number of steps.

Real-Life Examples:

A cooking recipe

Directions to reach a location

ATM withdrawal steps

================================================================================================
| Characteristic   | Description                                                                |
| -----------------| -------------------------------------------------------------------------- |
| 1. Input         | Should accept zero or more well-defined inputs.                            |
| 2. Output        | Must produce at least one output.                                          |
| 3. Definiteness  | Every step must be clearly defined.                                        |
| 4. Finiteness    | It must terminate after a finite number of steps.                          |
| 5. Effectiveness | Each step must be basic enough to be performed exactly and in finite time. |
| 6. Efficiency    | Should make optimal use of time and space.                                 |
| 7. Generality    | Should be applicable to a class of problems, not just a single instance.   |

==============================================================
==> BIG O notation 
======================================================================
Big O notation is used to measure how running time or space requirements 
for your programs grows as input size grows 

e.g. 


def demo(arr):
    ... 


size(arr)  => 100  -> approx time 0.22 miliseconds 
size(arr)  => 1000 -> approx time 2.30 miliseconds

time dependes on system hardware 

========================================================================
==>What is Time Complexity?
========================================================================
Time Complexity helps you measure how fast your code runs — not in seconds, 
but in terms of steps the computer takes based on the input size.

====================================
==>Why do we care about this?

When solving coding problems, we want to:

Choose the fastest algorithm.

Write efficient code that works even for large inputs (like millions of characters).

=====================================================
for e.g. 

You write a function that prints each character in a string:
--------------------------------------------------------------------------
def print_chars(s):
    for ch in s:
        print(ch)

print_chars("hello")
--------------------------------------------------------------------------
The loop runs 5 times.

If the string had 1000 characters? It would run 1000 times.

This is called O(n) time
n = number of characters in the input

More characters → more time

Grows linearly
=====================================================================
=====================================================================

to calculate measurement of time we have to use math but instend of math 
we can use Big-O notation 


=====================================================================
| Big-O      | Meaning                      | Example               |
|------------| ---------------------------- | --------------------- |
| O(1)       | Constant time                | Accessing `s[0]`      |
| O(n)       | Linear time                  | Loop through a string |
| O(n²)      | Quadratic time (nested loop) | Two loops over string |
| O(log n)   | Logarithmic time             | Binary Search         |
| O(n log n) | Merge sort                   | Efficient sorting     |


Visual Intuition
Imagine n = number of people in a line.

O(1): You ask the first person. Quick!

O(n): You ask everyone, one by one.

O(n²): For every person, you ask everyone else too.
        (The number of steps grows very fast — like n × n — as input grows)

O(log n): You divide the line in half repeatedly.Efficient 

==================================================
==================================================
What does O(n²) mean?
It means:

"The number of steps grows very fast — like n × n — as input grows."

Simple Analogy: "Asking Everyone"
Imagine you’re in a class with 10 students.

You ask each student, "Have you already answered?"

But to check, you go through a list of previous students who already answered.

So:

For the 1st student → check 0 people.

2nd → check 1 person.

3rd → check 2 people.

...

10th → check 9 people.

That’s 0 + 1 + 2 + ... + 9 = 45 checks

And if you had 100 students?

 0 + 1 + 2 + ... + 99 = 4,950 checks
This grows very fast → like n × n = n²

============================================================
Apply to Your Code:

for char in s:                   # loop 1 → runs n times
    if char not in result:       # loop 2 → checks up to n times
        result += char

Let’s say the string is "programming" → it has n = 11 characters.

Step by Step:
First character: result = "" → check 0 times

Second character: result = "p" → check 1 time

Third character: result = "pr" → check 2 times

...

Last character: result = "progamin" → check 9 or 10 times

So, again we do:

0 + 1 + 2 + ... + (n-1) ≈ n² steps
================================================================


Big - O (Big-Oh notation)

Big- Ω  (Alt - 234)  Omega

Big - Θ   (Alt - 233) theta

∞ (Alt - 236) infinity


=================================
What Are Big-O, Big-Ω, Big-Θ? (In Simple Words)
When you write a program (like searching, sorting, etc.), it takes time and 
sometimes memory to complete.
But when your input grows bigger (like from 10 items to 10,000 items), 
your program takes more time.

To measure how fast or slow your program grows with input size, we use:

we don't need to Implement in our code they’re something you analyze about your code.

| Name      | Why We Use It                       | Example Meaning                         |
| ----------| ---------------------------------    | --------------------------------------- |
| Big-O     | To describe the worst-case time      | Maximum time taken when input is huge.  |
| Big-Omega | To describe the best-case time       | Fastest time possible (ideal scenario). |
| Big-Theta | To describe the average/typical time | Exact/typical time for all cases.       |

===============================================
e.g.

Exercise 1: Linear Search
Imagine searching your name in a list.
This is called Linear Search.

def linear_search(arr, target):
    for item in arr:
        if item == target:
            return True  # Found it!
    return False  # Not found

# Example
names = ["Amit", "Rahul", "Neha", "Riya", "Suresh", "Priya"]
print(linear_search(names, "Riya"))  # True
print(linear_search(names, "John"))  # False

===============================================
Time Complexity Analysis:
Big-O (Worst Case): O(n)
→ If "John" is not found, we search entire list.

Big-Ω (Best Case): Ω(1)
→ If target is at the first position.

Big-Θ (Average Case): Θ(n)
→ Typically, it will find somewhere in the middle.

===============================================


