

Before start with BIG O Notation we need to understand algorithm


In Data Structures and Algorithms (DSA), an algorithm is a step-by-step procedure or 
finite set of instructions designed to solve a specific problem or perform a specific task.

in another way we can say that 

An algorithm is a well-defined sequence of steps that takes some input, processes it, and produces the desired output.


example of algorithm :::: 

Example: Sum of Two Numbers
Problem:
Add two numbers and return the result.

Algorithm:
1) Start

2) Take two inputs: a and b

3) Compute the sum: sum = a + b

4) Return sum

5) End

================================================
Why Are Algorithms Important in DSA?

Efficiency: Helps you choose the most time- and space-efficient solution

Optimization: Reduces redundant or unnecessary steps

Problem Solving: Allows you to break down complex problems into smaller, manageable parts

Foundation: Algorithms + Data Structures = Core of software development, coding interviews, 
and real-world applications

=========================================================
some common type of algorithm:::: 

| Type                 | Example                      |
| ---------------------| ---------------------------- |
| Searching Algorithms | Linear Search, Binary Search |
| Sorting Algorithms   | Bubble, Merge, Quick Sort    |
| Recursive Algorithms | Factorial, Fibonacci         |
| Greedy Algorithms    | Fractional Knapsack, Prim’s  |
| Divide & Conquer     | Merge Sort, Quick Sort       |
| Dynamic Programming  | 0/1 Knapsack, Fibonacci (DP) |
| Backtracking         | N-Queens, Sudoku Solver      |
| Graph Algorithms     | BFS, DFS, Dijkstra’s         |

===============================================================
Resource Utilize :::
        to understand this we need to manage our resource and processer


================================================================
processor operations ::

issue we can't get proper result ussing running system status because it dependes on old or new system 


Algorithm => processer operator 

            = sum of all individual operations 



