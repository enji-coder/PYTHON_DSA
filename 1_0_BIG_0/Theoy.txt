==> BIG O notation 
======================================================================
Big O notation is used to measure how running time or space requirements 
for your programs grows as input size grows 

e.g. 


def demo(arr):
    ... 


size(arr)  => 100  -> approx time 0.22 miliseconds 
size(arr)  => 1000 -> approx time 2.30 miliseconds

time dependes on system hardware 

========================================================================
==>What is Time Complexity?
========================================================================
Time Complexity helps you measure how fast your code runs — not in seconds, 
but in terms of steps the computer takes based on the input size.

====================================
==>Why do we care about this?

When solving coding problems, we want to:

Choose the fastest algorithm.

Write efficient code that works even for large inputs (like millions of characters).

=====================================================
for e.g. 

You write a function that prints each character in a string:
--------------------------------------------------------------------------
def print_chars(s):
    for ch in s:
        print(ch)

print_chars("hello")
--------------------------------------------------------------------------
The loop runs 5 times.

If the string had 1000 characters? It would run 1000 times.

This is called O(n) time
n = number of characters in the input

More characters → more time

Grows linearly
=====================================================================
=====================================================================

to calculate measurement of time we have to use math but instend of math 
we can use Big-O notation 



=====================================================================
| Big-O      | Meaning                      | Example               |
|------------| ---------------------------- | --------------------- |
| O(1)       | Constant time                | Accessing `s[0]`      |
| O(n)       | Linear time                  | Loop through a string |
| O(n²)      | Quadratic time (nested loop) | Two loops over string |
| O(log n)   | Logarithmic time             | Binary Search         |
| O(n log n) | Merge sort                   | Efficient sorting     |


Visual Intuition
Imagine n = number of people in a line.

O(1): You ask the first person. Quick!

O(n): You ask everyone, one by one.

O(n²): For every person, you ask everyone else too.
        (The number of steps grows very fast — like n × n — as input grows)

O(log n): You divide the line in half repeatedly.Efficient 

==================================================
==================================================
What does O(n²) mean?
It means:

"The number of steps grows very fast — like n × n — as input grows."

Simple Analogy: "Asking Everyone"
Imagine you’re in a class with 10 students.

You ask each student, "Have you already answered?"

But to check, you go through a list of previous students who already answered.

So:

For the 1st student → check 0 people.

2nd → check 1 person.

3rd → check 2 people.

...

10th → check 9 people.

That’s 0 + 1 + 2 + ... + 9 = 45 checks

And if you had 100 students?

 0 + 1 + 2 + ... + 99 = 4,950 checks
This grows very fast → like n × n = n²

============================================================
Apply to Your Code:

for char in s:                   # loop 1 → runs n times
    if char not in result:       # loop 2 → checks up to n times
        result += char

Let’s say the string is "programming" → it has n = 11 characters.

Step by Step:
First character: result = "" → check 0 times

Second character: result = "p" → check 1 time

Third character: result = "pr" → check 2 times

...

Last character: result = "progamin" → check 9 or 10 times

So, again we do:

0 + 1 + 2 + ... + (n-1) ≈ n² steps
================================================================

Before start with BIG O Notation we need to understand algorithm


In Data Structures and Algorithms (DSA), an algorithm is a step-by-step procedure or 
finite set of instructions designed to solve a specific problem or perform a specific task.

in another way we can say that 

An algorithm is a well-defined sequence of steps that takes some input, processes it, and produces the desired output.


example of algorithm :::: 

Example: Sum of Two Numbers
Problem:
Add two numbers and return the result.

Algorithm:
1) Start

2) Take two inputs: a and b

3) Compute the sum: sum = a + b

4) Return sum

5) End

================================================
Why Are Algorithms Important in DSA?

Efficiency: Helps you choose the most time- and space-efficient solution

Optimization: Reduces redundant or unnecessary steps

Problem Solving: Allows you to break down complex problems into smaller, manageable parts

Foundation: Algorithms + Data Structures = Core of software development, coding interviews, 
and real-world applications

=========================================================
some common type of algorithm:::: 

| Type                 | Example                      |
| ---------------------| ---------------------------- |
| Searching Algorithms | Linear Search, Binary Search |
| Sorting Algorithms   | Bubble, Merge, Quick Sort    |
| Recursive Algorithms | Factorial, Fibonacci         |
| Greedy Algorithms    | Fractional Knapsack, Prim’s  |
| Divide & Conquer     | Merge Sort, Quick Sort       |
| Dynamic Programming  | 0/1 Knapsack, Fibonacci (DP) |
| Backtracking         | N-Queens, Sudoku Solver      |
| Graph Algorithms     | BFS, DFS, Dijkstra’s         |

===============================================================


